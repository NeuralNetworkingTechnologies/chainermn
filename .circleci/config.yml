# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.1
        environment:
          MPI: "openmpi-1.10.3"
          CHAINER_VER: "3.1.0"
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "requirements.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
          - openmpi-1.10.3

      - run:
          name: before_install
          command: |
            python --version;
            ./.travis_build_mpi.sh

      - save_cache:
          paths:
            - ./mpi
          key: openmpi-1.10.3

      - run:
          name: install dependencies
          command: |
            export PATH=$HOME/mpi/$MPI/bin:$PATH
            export LD_LIBRARY_PATH=$HOME/mpi/$MPI/lib:$HOME/mpi/$MPI/lib64:$LD_LIBRARY_PATH
            python3 -m venv venv
            . venv/bin/activate
            ## pip install -r requirements.txt
            pip install nose hacking mock autopep8
            pip install cython mpi4py cffi
            pip install chainer==$CHAINER_VER
            python setup.py develop --no-nccl

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}
        
      # run tests!
      - run:
          name: run tests
          command: |
            export PATH=$HOME/mpi/$MPI/bin:$PATH
            export LD_LIBRARY_PATH=$HOME/mpi/$MPI/lib:$HOME/mpi/$MPI/lib64:$LD_LIBRARY_PATH
            . venv/bin/activate
            flake8 .
            flake8 --config=.flake8.cython .
            autopep8 -r . --global-config .pep8 | tee check_autopep8
            test ! -s check_autopep8
            export PYTHONWARNINGS='ignore::FutureWarning'
            nosetests -s -v -a '!nccl,!gpu,!slow'            
            ## python manage.py test

      - store_artifacts:
          path: test-reports
          destination: test-reports
          